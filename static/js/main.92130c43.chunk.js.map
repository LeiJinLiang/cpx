{"version":3,"sources":["components/Home.js","components/About.js","components/DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["Home","About","DashBoard","state","text","Date","toLocaleTimeString","timer","this","setInterval","setState","clearInterval","React","Component","Container","styled","div","Wrapper","ul","Item","li","Column","Header","Main","Aside","App","basename","process","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MACaA,EAAO,kBAAM,qCCCbC,EAAQ,kBAAM,sC,wCCAdC,EAAb,YACE,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAM,IAAIC,MAAOC,sBAEnB,EAAKC,MAAQ,KALD,EADhB,iFAQuB,IAAD,OAClBC,KAAKD,MAAQE,aAAY,WACvB,EAAKC,SAAS,CACZN,MAAM,IAAIC,MAAOC,yBAElB,OAbP,6CAgBIK,cAAcH,KAAKD,SAhBvB,+BAkBY,IACAH,EAASI,KAAKL,MAAdC,KACR,OACE,oCACE,4BAAKA,QAtBb,GAA+BQ,IAAMC,W,w4CCKrC,IAAMC,EAAYC,IAAOC,IAAV,KAOTC,EAAUF,IAAOG,GAAV,KAQPC,EAAOJ,IAAOK,GAAV,KAKJC,EAASN,IAAOC,IAAV,KAkBNM,EAASP,YAAOM,EAAPN,CAAH,KAKNQ,EAAOR,YAAOM,EAAPN,CAAH,KAMJS,EAAQT,YAAOM,EAAPN,CAAH,KA0CIU,MAnCf,WACE,OACE,kBAACX,EAAD,KACE,kBAACQ,EAAD,KACE,kBAAC,IAAD,CAAeI,SAAUC,QACvB,kBAACV,EAAD,KACE,kBAACE,EAAD,KACE,kBAAC,IAAD,CAAMS,GAAG,KAAT,SAEF,kBAACT,EAAD,KACE,kBAAC,IAAD,CAAMS,GAAG,UAAT,UAEF,kBAACT,EAAD,KACE,kBAAC,IAAD,CAAMS,GAAG,cAAT,eAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,KACvB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,UAKR,kBAACP,EAAD,iBACA,kBAACC,EAAD,mBCjFcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92130c43.chunk.js","sourcesContent":["import React from \"react\";\nexport const Home = () => <h4>Home</h4>;\n","import React from \"react\";\n\nexport const About = () => <h4>About</h4>;\n","import React from \"react\";\n\nexport class DashBoard extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      text: new Date().toLocaleTimeString()\n    };\n    this.timer = null;\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({\n        text: new Date().toLocaleTimeString()\n      });\n    }, 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n  render() {\n    const { text } = this.state;\n    return (\n      <>\n        <h1>{text}</h1>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { Home } from \"./components/Home\";\nimport { About } from \"./components/About\";\nimport { DashBoard } from \"./components/DashBoard\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Wrapper = styled.ul`\n  list-style: none;\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  padding: 20px;\n`;\n\nconst Item = styled.li`\n  color: palegreen;\n  flex: 1;\n`;\n\nconst Column = styled.div`\n  --columns: 12;\n  /* --width: 0; */\n  --width: var(--width-mobile, 0);\n  flex-basis: calc(var(--width) / var(--columns) * 100%);\n  background-color: pink;\n  border: LavenderBlush 2px solid;\n  border-radius: 8px;\n  padding: 16px;\n  @media (min-width: 576px) {\n    --width-tablet: var(--width-mobile);\n    --width: var(--width-tablet);\n  }\n  @media (min-width: 768px) {\n    --width-desktop: var(--width-tablet);\n    --width: var(--width-desktop);\n  }\n`;\nconst Header = styled(Column)`\n  --width-mobile: 12;\n  height: 8rem;\n`;\n\nconst Main = styled(Column)`\n  --width-mobile: 12;\n  --width-tablet: 6;\n  --width-desktop: 8;\n  height: 64rem;\n`;\nconst Aside = styled(Column)`\n  --width-mobile: 12;\n  --width-tablet: 6;\n  --width-desktop: 4;\n  height: 64rem;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Header>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Wrapper>\n            <Item>\n              <Link to=\"/\">Home</Link>\n            </Item>\n            <Item>\n              <Link to=\"/about\">About</Link>\n            </Item>\n            <Item>\n              <Link to=\"/dashboard\">Dashboard</Link>\n            </Item>\n          </Wrapper>\n          <Switch>\n            <Route exact={true} path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/dashboard\">\n              <DashBoard />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </Header>\n      <Main>.content</Main>\n      <Aside>.sidebar</Aside>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}